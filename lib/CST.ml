(* Generated by ocaml-tree-sitter. *)
(*
   cpp grammar

   entrypoint: translation_unit
*)

open! Sexplib.Conv
open Tree_sitter_run

type pat_9d92f6a = Token.t (* pattern #[ 	]*ifndef *)

type pat_56631e5 = Token.t (* pattern #[ 	]*else *)

type pat_c3ea183 = Token.t (* pattern #[ 	]*define *)

type anon_choice_DOT_2ad1dab = [
    `DOT of Token.t (* "." *)
  | `DASHGT of Token.t (* "->" *)
]

type imm_tok_pat_36637e2 = Token.t (* pattern "[^\\n']" *)

type type_qualifier = [
    `Choice_const of [
        `Const of Token.t (* "const" *)
      | `Vola of Token.t (* "volatile" *)
      | `Rest of Token.t (* "restrict" *)
      | `X__Atomic of Token.t (* "_Atomic" *)
    ]
  | `Muta of Token.t (* "mutable" *)
  | `Cons_5014e42 of Token.t (* "constexpr" *)
  | `Cons_36fe86c of Token.t (* "constinit" *)
  | `Cons_a25342f of Token.t (* "consteval" *)
]

type imm_tok_prec_p1_pat_c7f65b4 = Token.t (* pattern "[^\\\\\"\\n]+" *)

type anon_choice_public_c9638d9 = [
    `Public of Token.t (* "public" *)
  | `Priv of Token.t (* "private" *)
  | `Prot of Token.t (* "protected" *)
]

type number_literal = Token.t

type pat_ca8830e = Token.t (* pattern #[ 	]*include *)

type false_ = Token.t

type storage_class_specifier = [
    `Extern of Token.t (* "extern" *)
  | `Static of Token.t (* "static" *)
  | `Regi of Token.t (* "register" *)
  | `Inline of Token.t (* "inline" *)
  | `Thread_local of Token.t (* "thread_local" *)
]

type anon_choice_DASHDASH_d11def2 = [
    `DASHDASH of Token.t (* "--" *)
  | `PLUSPLUS of Token.t (* "++" *)
]

type true_ = Token.t

type virtual_function_specifier = [ `Virt of Token.t (* "virtual" *) ]

type fold_operator = [
    `PLUS of Token.t (* "+" *)
  | `DASH of Token.t (* "-" *)
  | `STAR of Token.t (* "*" *)
  | `SLASH of Token.t (* "/" *)
  | `PERC of Token.t (* "%" *)
  | `HAT of Token.t (* "^" *)
  | `AMP of Token.t (* "&" *)
  | `BAR of Token.t (* "|" *)
  | `EQ of Token.t (* "=" *)
  | `LT of Token.t (* "<" *)
  | `GT of Token.t (* ">" *)
  | `LTLT of Token.t (* "<<" *)
  | `GTGT of Token.t (* ">>" *)
  | `PLUSEQ of Token.t (* "+=" *)
  | `DASHEQ of Token.t (* "-=" *)
  | `STAREQ of Token.t (* "*=" *)
  | `SLASHEQ of Token.t (* "/=" *)
  | `PERCEQ of Token.t (* "%=" *)
  | `HATEQ of Token.t (* "^=" *)
  | `AMPEQ of Token.t (* "&=" *)
  | `BAREQ of Token.t (* "|=" *)
  | `GTGTEQ of Token.t (* ">>=" *)
  | `LTLTEQ of Token.t (* "<<=" *)
  | `EQEQ of Token.t (* "==" *)
  | `BANGEQ of Token.t (* "!=" *)
  | `LTEQ of Token.t (* "<=" *)
  | `GTEQ of Token.t (* ">=" *)
  | `AMPAMP of Token.t (* "&&" *)
  | `BARBAR of Token.t (* "||" *)
  | `COMMA of Token.t (* "," *)
  | `DOTSTAR of Token.t (* ".*" *)
  | `DASHGTSTAR of Token.t (* "->*" *)
]

type break_statement = (Token.t (* "break" *) * Token.t (* ";" *))

type pat_bfeb4bb = Token.t (* pattern #[ 	]*elif *)

type default_method_clause = (
    Token.t (* "=" *) * Token.t (* "default" *) * Token.t (* ";" *)
)

type lambda_default_capture = [
    `EQ of Token.t (* "=" *)
  | `AMP of Token.t (* "&" *)
]

type continue_statement = (Token.t (* "continue" *) * Token.t (* ";" *))

type ms_unaligned_ptr_modifier = [
    `X__unal of Token.t (* "_unaligned" *)
  | `X___unal of Token.t (* "__unaligned" *)
]

type preproc_arg = Token.t

type preproc_directive = Token.t (* pattern #[ \t]*[a-zA-Z]\w* *)

type tok_prec_p1_gt = Token.t

type pat_3df6e71 = Token.t (* pattern #[ 	]*if *)

type escape_sequence = Token.t

type identifier =
  Token.t (* pattern \$?(\p{XID_Start}|_|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})(\p{XID_Continue}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})* *)

type pat_c46d1b2 = Token.t (* pattern #[ 	]*endif *)

type raw_string_literal = Token.t

type pat_25b90ba = Token.t (* pattern #[ 	]*ifdef *)

type system_lib_string = Token.t

type literal_suffix = Token.t (* pattern [a-zA-Z_]\w* *)

type primitive_type = Token.t

type anon_choice_type_a2fe5d4 = [
    `Type of Token.t (* "typename" *)
  | `Class of Token.t (* "class" *)
]

type ref_qualifier = [
    `AMP of Token.t (* "&" *)
  | `AMPAMP of Token.t (* "&&" *)
]

type ms_call_modifier = [
    `X___cdecl of Token.t (* "__cdecl" *)
  | `X___clrc of Token.t (* "__clrcall" *)
  | `X___stdc of Token.t (* "__stdcall" *)
  | `X___fast of Token.t (* "__fastcall" *)
  | `X___this of Token.t (* "__thiscall" *)
  | `X___vect of Token.t (* "__vectorcall" *)
]

type imm_tok_lpar = Token.t (* "(" *)

type virtual_specifier = [
    `Final of Token.t (* "final" *)
  | `Over of Token.t (* "override" *)
]

type anon_choice_BANG_67174d6 = [
    `BANG of Token.t (* "!" *)
  | `TILDE of Token.t (* "~" *)
  | `DASH of Token.t (* "-" *)
  | `PLUS of Token.t (* "+" *)
]

type delete_method_clause = (
    Token.t (* "=" *) * Token.t (* "delete" *) * Token.t (* ";" *)
)

type binary_fold_operator = (
    fold_operator * Token.t (* "..." *) * fold_operator
)

type decltype_auto = (
    Token.t (* "decltype" *) * Token.t (* "(" *) * Token.t (* "auto" *)
  * Token.t (* ")" *)
)

type preproc_call = (
    preproc_directive (*tok*)
  * preproc_arg (*tok*) option
  * Token.t (* "\n" *)
)

type char_literal = (
    [
        `LSQUOT of Token.t (* "L'" *)
      | `USQUOT_d861d39 of Token.t (* "u'" *)
      | `USQUOT_2701bdc of Token.t (* "U'" *)
      | `U8SQUOT of Token.t (* "u8'" *)
      | `SQUOT of Token.t (* "'" *)
    ]
  * [
        `Esc_seq of escape_sequence (*tok*)
      | `Imm_tok_pat_36637e2 of imm_tok_pat_36637e2
    ]
  * Token.t (* "'" *)
)

type string_literal = (
    [
        `LDQUOT of Token.t (* "L\"" *)
      | `UDQUOT_c163aae of Token.t (* "u\"" *)
      | `UDQUOT_df3447d of Token.t (* "U\"" *)
      | `U8DQUOT of Token.t (* "u8\"" *)
      | `DQUOT of Token.t (* "\"" *)
    ]
  * [
        `Imm_tok_prec_p1_pat_c7f65b4 of imm_tok_prec_p1_pat_c7f65b4
      | `Esc_seq of escape_sequence (*tok*)
    ]
      list (* zero or more *)
  * Token.t (* "\"" *)
)

type anon_choice_pat_25b90ba_4a37f8c = [
    `Pat_25b90ba of pat_25b90ba
  | `Pat_9d92f6a of pat_9d92f6a
]

type ms_pointer_modifier = [
    `Ms_unal_ptr_modi of ms_unaligned_ptr_modifier
  | `Ms_rest_modi of Token.t (* "__restrict" *)
  | `Ms_unsi_ptr_modi of Token.t (* "__uptr" *)
  | `Ms_signed_ptr_modi of Token.t (* "__sptr" *)
]

type anon_choice_raw_str_lit_28125b5 = [
    `Raw_str_lit of raw_string_literal (*tok*)
  | `Str_lit of string_literal
]

type type_parameter_declaration = (
    anon_choice_type_a2fe5d4
  * identifier (*tok*) option
)

type variadic_declarator = (Token.t (* "..." *) * identifier (*tok*) option)

type field_designator = (Token.t (* "." *) * identifier (*tok*))

type destructor_name = (Token.t (* "~" *) * identifier (*tok*))

type ms_declspec_modifier = (
    Token.t (* "__declspec" *) * Token.t (* "(" *) * identifier (*tok*)
  * Token.t (* ")" *)
)

type sized_type_specifier = (
    [
        `Signed of Token.t (* "signed" *)
      | `Unsi of Token.t (* "unsigned" *)
      | `Long of Token.t (* "long" *)
      | `Short of Token.t (* "short" *)
    ]
      list (* one or more *)
  * [ `Id of identifier (*tok*) | `Prim_type of primitive_type (*tok*) ]
      option
)

type preproc_defined = [
    `Defi_LPAR_id_RPAR of (
        Token.t (* "defined" *) * Token.t (* "(" *) * identifier (*tok*)
      * Token.t (* ")" *)
    )
  | `Defi_id of (Token.t (* "defined" *) * identifier (*tok*))
]

type anon_choice_name_id_d3c4b5f = [
    `Id of identifier (*tok*)
  | `DOTDOTDOT of Token.t (* "..." *)
]

type goto_statement = (
    Token.t (* "goto" *) * identifier (*tok*) * Token.t (* ";" *)
)

type preproc_def = (
    pat_c3ea183
  * identifier (*tok*)
  * preproc_arg (*tok*) option
  * Token.t (* "\n" *)
)

type variadic_type_parameter_declaration = (
    anon_choice_type_a2fe5d4
  * Token.t (* "..." *)
  * identifier (*tok*) option
)

type anon_choice_name_id_ba1b968 = [
    `Id of identifier (*tok*)
  | `Name_defi_name of (
        anon_choice_name_id_ba1b968
      * Token.t (* "::" *)
      * Token.t (* "inline" *) option
      * identifier (*tok*)
    )
]

type operator_name = (
    Token.t (* "operator" *)
  * [
        `Co_await of Token.t (* "co_await" *)
      | `PLUS of Token.t (* "+" *)
      | `DASH of Token.t (* "-" *)
      | `STAR of Token.t (* "*" *)
      | `SLASH of Token.t (* "/" *)
      | `PERC of Token.t (* "%" *)
      | `HAT of Token.t (* "^" *)
      | `AMP of Token.t (* "&" *)
      | `BAR of Token.t (* "|" *)
      | `TILDE of Token.t (* "~" *)
      | `BANG of Token.t (* "!" *)
      | `EQ of Token.t (* "=" *)
      | `LT of Token.t (* "<" *)
      | `GT of Token.t (* ">" *)
      | `PLUSEQ of Token.t (* "+=" *)
      | `DASHEQ of Token.t (* "-=" *)
      | `STAREQ of Token.t (* "*=" *)
      | `SLASHEQ of Token.t (* "/=" *)
      | `PERCEQ of Token.t (* "%=" *)
      | `HATEQ of Token.t (* "^=" *)
      | `AMPEQ of Token.t (* "&=" *)
      | `BAREQ of Token.t (* "|=" *)
      | `LTLT of Token.t (* "<<" *)
      | `GTGT of Token.t (* ">>" *)
      | `GTGTEQ of Token.t (* ">>=" *)
      | `LTLTEQ of Token.t (* "<<=" *)
      | `EQEQ of Token.t (* "==" *)
      | `BANGEQ of Token.t (* "!=" *)
      | `LTEQ of Token.t (* "<=" *)
      | `GTEQ of Token.t (* ">=" *)
      | `LTEQGT of Token.t (* "<=>" *)
      | `AMPAMP of Token.t (* "&&" *)
      | `BARBAR of Token.t (* "||" *)
      | `PLUSPLUS of Token.t (* "++" *)
      | `DASHDASH of Token.t (* "--" *)
      | `COMMA of Token.t (* "," *)
      | `DASHGTSTAR of Token.t (* "->*" *)
      | `DASHGT of Token.t (* "->" *)
      | `LPARRPAR of Token.t (* "()" *)
      | `LBRACKRBRACK of Token.t (* "[]" *)
      | `Choice_new_opt_LBRACKRBRACK of (
            [
                `New of Token.t (* "new" *)
              | `Delete of Token.t (* "delete" *)
            ]
          * Token.t (* "[]" *) option
        )
      | `DQUOTDQUOT_id of (Token.t (* "\"\"" *) * identifier (*tok*))
    ]
)

type concatenated_string = (
    anon_choice_raw_str_lit_28125b5
  * anon_choice_raw_str_lit_28125b5 list (* one or more *)
)

type variadic_reference_declarator = (
    [ `AMPAMP of Token.t (* "&&" *) | `AMP of Token.t (* "&" *) ]
  * variadic_declarator
)

type preproc_argument_list = (
    Token.t (* "(" *)
  * (
        preproc_expression
      * (Token.t (* "," *) * preproc_expression) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and preproc_binary_expression = [
    `Prep_exp_PLUS_prep_exp of (
        preproc_expression * Token.t (* "+" *) * preproc_expression
    )
  | `Prep_exp_DASH_prep_exp of (
        preproc_expression * Token.t (* "-" *) * preproc_expression
    )
  | `Prep_exp_STAR_prep_exp of (
        preproc_expression * Token.t (* "*" *) * preproc_expression
    )
  | `Prep_exp_SLASH_prep_exp of (
        preproc_expression * Token.t (* "/" *) * preproc_expression
    )
  | `Prep_exp_PERC_prep_exp of (
        preproc_expression * Token.t (* "%" *) * preproc_expression
    )
  | `Prep_exp_BARBAR_prep_exp of (
        preproc_expression * Token.t (* "||" *) * preproc_expression
    )
  | `Prep_exp_AMPAMP_prep_exp of (
        preproc_expression * Token.t (* "&&" *) * preproc_expression
    )
  | `Prep_exp_BAR_prep_exp of (
        preproc_expression * Token.t (* "|" *) * preproc_expression
    )
  | `Prep_exp_HAT_prep_exp of (
        preproc_expression * Token.t (* "^" *) * preproc_expression
    )
  | `Prep_exp_AMP_prep_exp of (
        preproc_expression * Token.t (* "&" *) * preproc_expression
    )
  | `Prep_exp_EQEQ_prep_exp of (
        preproc_expression * Token.t (* "==" *) * preproc_expression
    )
  | `Prep_exp_BANGEQ_prep_exp of (
        preproc_expression * Token.t (* "!=" *) * preproc_expression
    )
  | `Prep_exp_GT_prep_exp of (
        preproc_expression * Token.t (* ">" *) * preproc_expression
    )
  | `Prep_exp_GTEQ_prep_exp of (
        preproc_expression * Token.t (* ">=" *) * preproc_expression
    )
  | `Prep_exp_LTEQ_prep_exp of (
        preproc_expression * Token.t (* "<=" *) * preproc_expression
    )
  | `Prep_exp_LT_prep_exp of (
        preproc_expression * Token.t (* "<" *) * preproc_expression
    )
  | `Prep_exp_LTLT_prep_exp of (
        preproc_expression * Token.t (* "<<" *) * preproc_expression
    )
  | `Prep_exp_GTGT_prep_exp of (
        preproc_expression * Token.t (* ">>" *) * preproc_expression
    )
]

and preproc_call_expression = (identifier (*tok*) * preproc_argument_list)

and preproc_expression = [
    `Id of identifier (*tok*)
  | `Prep_call_exp of preproc_call_expression
  | `Num_lit of number_literal (*tok*)
  | `Char_lit of char_literal
  | `Prep_defi of preproc_defined
  | `Prep_un_exp of (anon_choice_BANG_67174d6 * preproc_expression)
  | `Prep_bin_exp of preproc_binary_expression
  | `Prep_paren_exp of (
        Token.t (* "(" *) * preproc_expression * Token.t (* ")" *)
    )
]

type preproc_params = (
    imm_tok_lpar (*tok*)
  * (
        anon_choice_name_id_d3c4b5f
      * (Token.t (* "," *) * anon_choice_name_id_d3c4b5f)
          list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

type user_defined_literal = (
    [
        `Num_lit of number_literal (*tok*)
      | `Char_lit of char_literal
      | `Str_lit of string_literal
      | `Raw_str_lit of raw_string_literal (*tok*)
      | `Conc_str of concatenated_string
    ]
  * literal_suffix (*tok*)
)

type preproc_include = (
    pat_ca8830e
  * [
        `Str_lit of string_literal
      | `System_lib_str of system_lib_string (*tok*)
      | `Id of identifier (*tok*)
      | `Prep_call_exp of preproc_call_expression
    ]
  * Token.t (* "\n" *)
)

type preproc_function_def = (
    pat_c3ea183
  * identifier (*tok*)
  * preproc_params
  * preproc_arg (*tok*) option
  * Token.t (* "\n" *)
)

type abstract_array_declarator = (
    abstract_declarator option
  * Token.t (* "[" *)
  * type_qualifier list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

and abstract_declarator = [
    `Choice_abst_poin_decl of [
        `Abst_poin_decl of abstract_pointer_declarator
      | `Abst_func_decl of abstract_function_declarator
      | `Abst_array_decl of abstract_array_declarator
      | `Abst_paren_decl of abstract_parenthesized_declarator
    ]
  | `Abst_ref_decl of (ref_qualifier * abstract_declarator option)
]

and abstract_function_declarator = (
    abstract_declarator option
  * parameter_list
  * [
        `Type_qual of type_qualifier
      | `Ref_qual of ref_qualifier
      | `Noex of noexcept
      | `Throw_spec of throw_specifier
    ]
      list (* zero or more *)
  * trailing_return_type option
  * requires_clause option
)

and abstract_parenthesized_declarator = (
    Token.t (* "(" *) * abstract_declarator * Token.t (* ")" *)
)

and abstract_pointer_declarator = (
    Token.t (* "*" *)
  * type_qualifier list (* zero or more *)
  * abstract_declarator option
)

and alias_declaration = (
    Token.t (* "using" *) * identifier (*tok*) * Token.t (* "=" *)
  * type_descriptor * Token.t (* ";" *)
)

and anon_choice_arg_list_e4b6f8f = [
    `Arg_list of argument_list
  | `Init_list of initializer_list
]

and anon_choice_class_name_d6703e6 = [
    `Class_name of class_name
  | `Opt_class_name_opt_virt_spec_opt_base_class_clause_field_decl_list of (
        class_name option
      * virtual_specifier option
      * base_class_clause option
      * field_declaration_list
    )
]

and anon_choice_comp_stmt_e6a11e2 = [
    `Comp_stmt of compound_statement
  | `Try_stmt of try_statement
]

and anon_choice_decl_f8b0ff3 = [
    `Decl of declarator
  | `Init_decl of init_declarator
]

and anon_choice_exp_3078596 = [
    `Exp of expression
  | `Init_list of initializer_list
]

and anon_choice_exp_508611b = [
    `Exp of expression
  | `STAR of Token.t (* "*" *)
]

and anon_choice_exp_55b4dba = [
    `Exp of expression
  | `Comma_exp of comma_expression
]

and anon_choice_init_pair_1a6981e = [
    `Init_pair of (
        [
            `Subs_desi of subscript_designator
          | `Field_desi of field_designator
        ]
          list (* one or more *)
      * Token.t (* "=" *)
      * anon_choice_exp_3078596
    )
  | `Exp of expression
  | `Init_list of initializer_list
]

and anon_choice_name_id_1d0ba77 = [
    `Id of identifier (*tok*)
  | `Qual_id of qualified_identifier
]

and anon_choice_op_cast_b108b62 = [
    `Op_cast of operator_cast
  | `Qual_op_cast_id of qualified_operator_cast_identifier
]

and anon_choice_param_decl_13b5913 = [
    `Param_decl of parameter_declaration
  | `Opt_param_decl of optional_parameter_declaration
  | `Type_param_decl of type_parameter_declaration
  | `Vari_param_decl of variadic_parameter_declaration
  | `Vari_type_param_decl of variadic_type_parameter_declaration
  | `Opt_type_param_decl of optional_type_parameter_declaration
  | `Temp_temp_param_decl of (
        Token.t (* "template" *)
      * template_parameter_list
      * [
            `Type_param_decl of type_parameter_declaration
          | `Vari_type_param_decl of variadic_type_parameter_declaration
          | `Opt_type_param_decl of optional_type_parameter_declaration
        ]
    )
]

and anon_choice_param_decl_1a61eef = [
    `Param_decl of parameter_declaration
  | `Opt_param_decl of optional_parameter_declaration
  | `Vari_param_decl of variadic_parameter_declaration
]

and anon_choice_param_decl_d9083af = [
    `Param_decl of parameter_declaration
  | `Opt_param_decl of optional_parameter_declaration
  | `Vari_param_decl of variadic_parameter_declaration
  | `DOTDOTDOT of Token.t (* "..." *)
]

and anon_choice_prep_else_8b52b0f = [
    `Prep_else of (pat_56631e5 * translation_unit)
  | `Prep_elif of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * translation_unit
      * anon_choice_prep_else_8b52b0f option
    )
]

and anon_choice_prep_else_in_field_decl_list_97ea65e = [
    `Prep_else_in_field_decl_list of (
        pat_56631e5
      * field_declaration_list_item list (* zero or more *)
    )
  | `Prep_elif_in_field_decl_list of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * field_declaration_list_item list (* zero or more *)
      * anon_choice_prep_else_in_field_decl_list_97ea65e option
    )
]

and anon_choice_type_desc_4d9cafa = [
    `Type_desc of type_descriptor
  | `Type_param_pack_expa of (type_descriptor * Token.t (* "..." *))
  | `Exp of expression
]

and anon_choice_type_qual_c8e0748 = [
    `Type_qual of type_qualifier
  | `Ref_qual of ref_qualifier
  | `Virt_spec of virtual_specifier
  | `Noex of noexcept
  | `Throw_spec of throw_specifier
]

and argument_list = (
    Token.t (* "(" *)
  * (
        anon_choice_exp_3078596
      * (Token.t (* "," *) * anon_choice_exp_3078596) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and array_declarator = (
    declarator
  * Token.t (* "[" *)
  * type_qualifier list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

and array_field_declarator = (
    field_declarator
  * Token.t (* "[" *)
  * type_qualifier list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

and assignment_expression = (
    assignment_left_expression
  * [
        `EQ of Token.t (* "=" *)
      | `STAREQ of Token.t (* "*=" *)
      | `SLASHEQ of Token.t (* "/=" *)
      | `PERCEQ of Token.t (* "%=" *)
      | `PLUSEQ of Token.t (* "+=" *)
      | `DASHEQ of Token.t (* "-=" *)
      | `LTLTEQ of Token.t (* "<<=" *)
      | `GTGTEQ of Token.t (* ">>=" *)
      | `AMPEQ of Token.t (* "&=" *)
      | `HATEQ of Token.t (* "^=" *)
      | `BAREQ of Token.t (* "|=" *)
    ]
  * expression
)

and assignment_left_expression = [
    `Choice_id of [
        `Id of identifier (*tok*)
      | `Call_exp of call_expression
      | `Field_exp of field_expression
      | `Poin_exp of pointer_expression
      | `Subs_exp of subscript_expression
      | `Paren_exp of parenthesized_expression
    ]
  | `Qual_id of qualified_identifier
]

and attribute = (
    (identifier (*tok*) * Token.t (* "::" *)) option
  * identifier (*tok*)
  * argument_list option
)

and attribute_declaration = (
    Token.t (* "[[" *)
  * attribute
  * (Token.t (* "," *) * attribute) list (* zero or more *)
  * Token.t (* "]]" *)
)

and attribute_specifier = (
    Token.t (* "__attribute__" *) * Token.t (* "(" *) * argument_list
  * Token.t (* ")" *)
)

and attributed_declarator = (
    declarator
  * attribute_declaration list (* one or more *)
)

and attributed_field_declarator = (
    field_declarator
  * attribute_declaration list (* one or more *)
)

and attributed_statement = (
    attribute_declaration list (* one or more *)
  * statement
)

and base_class_clause = (
    Token.t (* ":" *)
  * anon_choice_public_c9638d9 option
  * class_name
  * Token.t (* "..." *) option
  * (
        Token.t (* "," *)
      * anon_choice_public_c9638d9 option
      * class_name
      * Token.t (* "..." *) option
    )
      list (* zero or more *)
)

and binary_expression = [
    `Choice_exp_PLUS_exp of [
        `Exp_PLUS_exp of (expression * Token.t (* "+" *) * expression)
      | `Exp_DASH_exp of (expression * Token.t (* "-" *) * expression)
      | `Exp_STAR_exp of (expression * Token.t (* "*" *) * expression)
      | `Exp_SLASH_exp of (expression * Token.t (* "/" *) * expression)
      | `Exp_PERC_exp of (expression * Token.t (* "%" *) * expression)
      | `Exp_BARBAR_exp of (expression * Token.t (* "||" *) * expression)
      | `Exp_AMPAMP_exp of (expression * Token.t (* "&&" *) * expression)
      | `Exp_BAR_exp of (expression * Token.t (* "|" *) * expression)
      | `Exp_HAT_exp of (expression * Token.t (* "^" *) * expression)
      | `Exp_AMP_exp of (expression * Token.t (* "&" *) * expression)
      | `Exp_EQEQ_exp of (expression * Token.t (* "==" *) * expression)
      | `Exp_BANGEQ_exp of (expression * Token.t (* "!=" *) * expression)
      | `Exp_GT_exp of (expression * Token.t (* ">" *) * expression)
      | `Exp_GTEQ_exp of (expression * Token.t (* ">=" *) * expression)
      | `Exp_LTEQ_exp of (expression * Token.t (* "<=" *) * expression)
      | `Exp_LT_exp of (expression * Token.t (* "<" *) * expression)
      | `Exp_LTLT_exp of (expression * Token.t (* "<<" *) * expression)
      | `Exp_GTGT_exp of (expression * Token.t (* ">>" *) * expression)
    ]
  | `Exp_LTEQGT_exp of (expression * Token.t (* "<=>" *) * expression)
]

and binary_fold = (expression * binary_fold_operator * expression)

and bitfield_clause = (Token.t (* ":" *) * expression)

and call_expression = [
    `Exp_arg_list of (expression * argument_list)
  | `Prim_type_arg_list of (primitive_type (*tok*) * argument_list)
]

and cast_expression = (
    Token.t (* "(" *) * type_descriptor * Token.t (* ")" *) * expression
)

and catch_clause = (
    Token.t (* "catch" *) * parameter_list * compound_statement
)

and class_name = [
    `Id of identifier (*tok*)
  | `Temp_type of template_type
  | `Qual_type_id of qualified_type_identifier
]

and co_await_expression = (Token.t (* "co_await" *) * expression)

and comma_expression = (
    expression * Token.t (* "," *) * anon_choice_exp_55b4dba
)

and compound_literal_expression = [
    `LPAR_type_desc_RPAR_init_list of (
        Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
      * initializer_list
    )
  | `Class_name_init_list of (class_name * initializer_list)
]

and compound_statement = (
    Token.t (* "{" *) * translation_unit * Token.t (* "}" *)
)

and concept_definition = (
    Token.t (* "concept" *) * identifier (*tok*) * Token.t (* "=" *)
  * expression * Token.t (* ";" *)
)

and condition_clause = (
    Token.t (* "(" *)
  * init_statement option
  * [
        `Exp of expression
      | `Comma_exp of comma_expression
      | `Cond_decl of condition_declaration
    ]
  * Token.t (* ")" *)
)

and condition_declaration = (
    declaration_specifiers
  * declarator
  * [
        `EQ_exp of (Token.t (* "=" *) * expression)
      | `Init_list of initializer_list
    ]
)

and conditional_expression = (
    expression * Token.t (* "?" *) * expression * Token.t (* ":" *)
  * expression
)

and constructor_or_destructor_declaration = (
    constructor_specifiers list (* zero or more *)
  * function_declarator
  * Token.t (* ";" *)
)

and constructor_or_destructor_definition = (
    constructor_specifiers list (* zero or more *)
  * function_declarator
  * field_initializer_list option
  * [
        `Choice_comp_stmt of anon_choice_comp_stmt_e6a11e2
      | `Defa_meth_clause of default_method_clause
      | `Delete_meth_clause of delete_method_clause
    ]
)

and constructor_specifiers = [
    `Decl_modifs of declaration_modifiers
  | `Expl_func_spec of explicit_function_specifier
]

and declaration = (
    declaration_specifiers
  * anon_choice_decl_f8b0ff3
  * (Token.t (* "," *) * anon_choice_decl_f8b0ff3) list (* zero or more *)
  * Token.t (* ";" *)
)

and declaration_list = (
    Token.t (* "{" *) * translation_unit * Token.t (* "}" *)
)

and declaration_modifiers = [
    `Choice_stor_class_spec of [
        `Stor_class_spec of storage_class_specifier
      | `Type_qual of type_qualifier
      | `Attr_spec of attribute_specifier
      | `Attr_decl of attribute_declaration
      | `Ms_decl_modi of ms_declspec_modifier
    ]
  | `Virt_func_spec of virtual_function_specifier
]

and declaration_specifiers = (
    declaration_modifiers list (* zero or more *)
  * type_specifier
  * declaration_modifiers list (* zero or more *)
)

and declarator = [
    `Choice_attr_decl of [
        `Attr_decl of attributed_declarator
      | `Poin_decl of pointer_declarator
      | `Func_decl of function_declarator
      | `Array_decl of array_declarator
      | `Paren_decl of parenthesized_declarator
      | `Id of identifier (*tok*)
    ]
  | `Ref_decl of (ref_qualifier * declarator)
  | `Qual_id of qualified_identifier
  | `Temp_func of template_function
  | `Op_name of operator_name
  | `Dest_name of destructor_name
  | `Stru_bind_decl of (
        Token.t (* "[" *)
      * identifier (*tok*)
      * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
      * Token.t (* "]" *)
    )
]

and delete_expression = (
    Token.t (* "::" *) option
  * Token.t (* "delete" *)
  * (Token.t (* "[" *) * Token.t (* "]" *)) option
  * expression
)

and dependent_field_identifier = (Token.t (* "template" *) * template_method)

and dependent_identifier = (Token.t (* "template" *) * template_function)

and dependent_type_identifier = (Token.t (* "template" *) * template_type)

and do_statement = (
    Token.t (* "do" *) * statement * Token.t (* "while" *)
  * parenthesized_expression * Token.t (* ";" *)
)

and empty_declaration = (type_specifier * Token.t (* ";" *))

and enum_base_clause = (
    Token.t (* ":" *)
  * [
        `Qual_type_id of qualified_type_identifier
      | `Id of identifier (*tok*)
      | `Sized_type_spec of sized_type_specifier
    ]
)

and enumerator = (
    identifier (*tok*)
  * (Token.t (* "=" *) * expression) option
)

and enumerator_list = (
    Token.t (* "{" *)
  * (enumerator * (Token.t (* "," *) * enumerator) list (* zero or more *))
      option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

and explicit_function_specifier = [
    `Expl of Token.t (* "explicit" *)
  | `Expl_LPAR_exp_RPAR of (
        Token.t (* "explicit" *) * Token.t (* "(" *) * expression
      * Token.t (* ")" *)
    )
]

and expression = [
    `Choice_choice_cond_exp of [
        `Choice_cond_exp of [
            `Cond_exp of conditional_expression
          | `Assign_exp of assignment_expression
          | `Bin_exp of binary_expression
          | `Un_exp of unary_expression
          | `Update_exp of update_expression
          | `Cast_exp of cast_expression
          | `Poin_exp of pointer_expression
          | `Sizeof_exp of sizeof_expression
          | `Subs_exp of subscript_expression
          | `Call_exp of call_expression
          | `Field_exp of field_expression
          | `Comp_lit_exp of compound_literal_expression
          | `Id of identifier (*tok*)
          | `Num_lit of number_literal (*tok*)
          | `Str_lit of string_literal
          | `True of true_ (*tok*)
          | `False of false_ (*tok*)
          | `Null of Token.t (* "NULL" *)
          | `Conc_str of concatenated_string
          | `Char_lit of char_literal
          | `Paren_exp of parenthesized_expression
        ]
      | `Co_await_exp of co_await_expression
      | `Requis_exp of requires_expression
      | `Requis_clause of requires_clause
      | `Temp_func of template_function
      | `Qual_id of qualified_identifier
      | `New_exp of new_expression
      | `Delete_exp of delete_expression
      | `Lambda_exp of lambda_expression
      | `Param_pack_expa of parameter_pack_expansion
      | `Null of Token.t (* "nullptr" *)
      | `This of Token.t (* "this" *)
      | `Raw_str_lit of raw_string_literal (*tok*)
      | `User_defi_lit of user_defined_literal
      | `Fold_exp of fold_expression
    ]
  | `Semg_ellips of Token.t (* "..." *)
  | `Deep_ellips of (
        Token.t (* "<..." *) * expression * Token.t (* "...>" *)
    )
]

and expression_statement = (
    anon_choice_exp_55b4dba option
  * Token.t (* ";" *)
)

and field_declaration = (
    declaration_specifiers
  * (
        field_declarator
      * (Token.t (* "," *) * field_declarator) list (* zero or more *)
    )
      option
  * [
        `Bitf_clause of bitfield_clause
      | `Init_list of initializer_list
      | `EQ_choice_exp of (Token.t (* "=" *) * anon_choice_exp_3078596)
    ]
      option
  * Token.t (* ";" *)
)

and field_declaration_list = (
    Token.t (* "{" *)
  * field_declaration_list_item list (* zero or more *)
  * Token.t (* "}" *)
)

and field_declaration_list_item = [
    `Choice_field_decl of [
        `Field_decl of field_declaration
      | `Prep_def of preproc_def
      | `Prep_func_def of preproc_function_def
      | `Prep_call of preproc_call
      | `Prep_if_in_field_decl_list of preproc_if_in_field_declaration_list
      | `Prep_ifdef_in_field_decl_list of
          preproc_ifdef_in_field_declaration_list
    ]
  | `Temp_decl of template_declaration
  | `Inline_meth_defi of (
        declaration_specifiers
      * field_declarator
      * [
            `Comp_stmt of compound_statement
          | `Defa_meth_clause of default_method_clause
          | `Delete_meth_clause of delete_method_clause
        ]
    )
  | `Cons_or_dest_defi of constructor_or_destructor_definition
  | `Cons_or_dest_decl of constructor_or_destructor_declaration
  | `Op_cast_defi of operator_cast_definition
  | `Op_cast_decl of operator_cast_declaration
  | `Friend_decl of (
        Token.t (* "friend" *)
      * [
            `Decl of declaration
          | `Func_defi of function_definition
          | `Opt_choice_class_class_name_SEMI of (
                [
                    `Class of Token.t (* "class" *)
                  | `Struct of Token.t (* "struct" *)
                  | `Union of Token.t (* "union" *)
                ]
                  option
              * class_name
              * Token.t (* ";" *)
            )
        ]
    )
  | `Access_spec of (anon_choice_public_c9638d9 * Token.t (* ":" *))
  | `Alias_decl of alias_declaration
  | `Using_decl of using_declaration
  | `Type_defi of type_definition
  | `Static_assert_decl of static_assert_declaration
]

and field_declarator = [
    `Choice_attr_field_decl of [
        `Attr_field_decl of attributed_field_declarator
      | `Poin_field_decl of pointer_field_declarator
      | `Func_field_decl of function_field_declarator
      | `Array_field_decl of array_field_declarator
      | `Paren_field_decl of parenthesized_field_declarator
      | `Id of identifier (*tok*)
    ]
  | `Ref_field_decl of (ref_qualifier * field_declarator)
  | `Temp_meth of template_method
  | `Op_name of operator_name
]

and field_expression = [
    `Exp_choice_DOT_id of (
        expression * anon_choice_DOT_2ad1dab * identifier (*tok*)
    )
  | `Exp_choice_DOT_choice_dest_name of (
        expression
      * anon_choice_DOT_2ad1dab
      * [
            `Dest_name of destructor_name
          | `Temp_meth of template_method
          | `Depe_field_id of dependent_field_identifier
        ]
    )
]

and field_initializer = (
    [
        `Id of identifier (*tok*)
      | `Temp_meth of template_method
      | `Qual_field_id of qualified_field_identifier
    ]
  * [ `Init_list of initializer_list | `Arg_list of argument_list ]
  * Token.t (* "..." *) option
)

and field_initializer_list = (
    Token.t (* ":" *)
  * field_initializer
  * (Token.t (* "," *) * field_initializer) list (* zero or more *)
)

and fold_expression = (
    Token.t (* "(" *)
  * [
        `Un_right_fold of unary_right_fold
      | `Un_left_fold of unary_left_fold
      | `Bin_fold of binary_fold
    ]
  * Token.t (* ")" *)
)

and for_statement = (
    Token.t (* "for" *)
  * Token.t (* "(" *)
  * [ `Decl of declaration | `Opt_choice_exp_SEMI of expression_statement ]
  * anon_choice_exp_55b4dba option
  * Token.t (* ";" *)
  * anon_choice_exp_55b4dba option
  * Token.t (* ")" *)
  * statement
)

and function_declarator = (
    declarator
  * parameter_list
  * attribute_specifier list (* zero or more *)
  * anon_choice_type_qual_c8e0748 list (* zero or more *)
  * trailing_return_type option
  * requires_clause option
)

and function_definition = (
    ms_call_modifier option
  * declaration_specifiers
  * declarator
  * anon_choice_comp_stmt_e6a11e2
)

and function_field_declarator = (
    field_declarator
  * parameter_list
  * anon_choice_type_qual_c8e0748 list (* zero or more *)
  * trailing_return_type option
  * requires_clause option
)

and if_statement = (
    Token.t (* "if" *)
  * Token.t (* "constexpr" *) option
  * condition_clause
  * statement
  * (Token.t (* "else" *) * statement) option
)

and init_declarator = [
    `Decl_EQ_choice_init_list of (
        declarator
      * Token.t (* "=" *)
      * [ `Init_list of initializer_list | `Exp of expression ]
    )
  | `Decl_choice_arg_list of (declarator * anon_choice_arg_list_e4b6f8f)
]

and init_statement = [
    `Alias_decl of alias_declaration
  | `Type_defi of type_definition
  | `Decl of declaration
  | `Exp_stmt of expression_statement
]

and initializer_list = (
    Token.t (* "{" *)
  * (
        anon_choice_init_pair_1a6981e
      * (Token.t (* "," *) * anon_choice_init_pair_1a6981e)
          list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

and labeled_statement = (identifier (*tok*) * Token.t (* ":" *) * statement)

and lambda_capture_specifier = (
    Token.t (* "[" *)
  * [
        `Lambda_defa_capt of lambda_default_capture
      | `Opt_exp_rep_COMMA_exp of
          (
              expression
            * (Token.t (* "," *) * expression) list (* zero or more *)
          )
            option
      | `Lambda_defa_capt_COMMA_exp_rep_COMMA_exp of (
            lambda_default_capture
          * Token.t (* "," *)
          * expression
          * (Token.t (* "," *) * expression) list (* zero or more *)
        )
    ]
  * Token.t (* "]" *)
)

and lambda_expression = (
    lambda_capture_specifier
  * (template_parameter_list * requires_clause option) option
  * abstract_function_declarator option
  * compound_statement
)

and linkage_specification = (
    Token.t (* "extern" *)
  * string_literal
  * [
        `Func_defi of function_definition
      | `Decl of declaration
      | `Decl_list of declaration_list
    ]
)

and ms_based_modifier = (Token.t (* "__based" *) * argument_list)

and new_declarator = [
  `Rectype of (
      Token.t (* "[" *)
    * expression
    * Token.t (* "]" *)
    * new_declarator option
  )
]

and new_expression = (
    Token.t (* "::" *) option
  * Token.t (* "new" *)
  * argument_list option
  * type_specifier
  * new_declarator option
  * anon_choice_arg_list_e4b6f8f option
)

and noexcept = (
    Token.t (* "noexcept" *)
  * (Token.t (* "(" *) * expression option * Token.t (* ")" *)) option
)

and non_case_statement = [
    `Choice_attr_stmt of [
        `Attr_stmt of attributed_statement
      | `Labe_stmt of labeled_statement
      | `Comp_stmt of compound_statement
      | `Exp_stmt of expression_statement
      | `If_stmt of if_statement
      | `Switch_stmt of switch_statement
      | `Do_stmt of do_statement
      | `While_stmt of while_statement
      | `For_stmt of for_statement
      | `Ret_stmt of return_statement
      | `Brk_stmt of break_statement
      | `Cont_stmt of continue_statement
      | `Goto_stmt of goto_statement
    ]
  | `Co_ret_stmt of (
        Token.t (* "co_return" *)
      * expression option
      * Token.t (* ";" *)
    )
  | `Co_yield_stmt of (
        Token.t (* "co_yield" *) * expression * Token.t (* ";" *)
    )
  | `For_range_loop of (
        Token.t (* "for" *)
      * Token.t (* "(" *)
      * init_statement option
      * declaration_specifiers
      * declarator
      * Token.t (* ":" *)
      * anon_choice_exp_3078596
      * Token.t (* ")" *)
      * statement
    )
  | `Try_stmt of try_statement
  | `Throw_stmt of (
        Token.t (* "throw" *)
      * expression option
      * Token.t (* ";" *)
    )
]

and operator_cast = (
    Token.t (* "operator" *) * declaration_specifiers * abstract_declarator
)

and operator_cast_declaration = (
    constructor_specifiers list (* zero or more *)
  * anon_choice_op_cast_b108b62
  * (Token.t (* "=" *) * expression) option
  * Token.t (* ";" *)
)

and operator_cast_definition = (
    constructor_specifiers list (* zero or more *)
  * anon_choice_op_cast_b108b62
  * compound_statement
)

and optional_parameter_declaration = (
    declaration_specifiers
  * declarator option
  * Token.t (* "=" *)
  * expression
)

and optional_type_parameter_declaration = (
    anon_choice_type_a2fe5d4
  * identifier (*tok*) option
  * Token.t (* "=" *)
  * type_specifier
)

and parameter_declaration = (
    declaration_specifiers
  * [ `Decl of declarator | `Abst_decl of abstract_declarator ] option
)

and parameter_list = (
    Token.t (* "(" *)
  * (
        anon_choice_param_decl_d9083af
      * (Token.t (* "," *) * anon_choice_param_decl_d9083af)
          list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and parameter_pack_expansion = (expression * Token.t (* "..." *))

and parenthesized_declarator = (
    Token.t (* "(" *) * declarator * Token.t (* ")" *)
)

and parenthesized_expression = (
    Token.t (* "(" *) * anon_choice_exp_55b4dba * Token.t (* ")" *)
)

and parenthesized_field_declarator = (
    Token.t (* "(" *) * field_declarator * Token.t (* ")" *)
)

and pointer_declarator = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * declarator
)

and pointer_expression = (
    [ `STAR of Token.t (* "*" *) | `AMP of Token.t (* "&" *) ]
  * expression
)

and pointer_field_declarator = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * field_declarator
)

and preproc_if = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * translation_unit
  * anon_choice_prep_else_8b52b0f option
  * pat_c46d1b2
)

and preproc_if_in_field_declaration_list = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_97ea65e option
  * pat_c46d1b2
)

and preproc_ifdef = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * translation_unit
  * anon_choice_prep_else_8b52b0f option
  * pat_c46d1b2
)

and preproc_ifdef_in_field_declaration_list = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_97ea65e option
  * pat_c46d1b2
)

and qualified_field_identifier = (
    scope_resolution
  * [
        `Depe_field_id of dependent_field_identifier
      | `Qual_field_id of qualified_field_identifier
      | `Temp_meth of template_method
      | `Id of identifier (*tok*)
    ]
)

and qualified_identifier = (
    scope_resolution
  * [
        `Depe_id of dependent_identifier
      | `Qual_id of qualified_identifier
      | `Temp_func of template_function
      | `Id of identifier (*tok*)
      | `Op_name of operator_name
      | `Dest_name of destructor_name
    ]
)

and qualified_operator_cast_identifier = (
    scope_resolution
  * [
        `Qual_op_cast_id of qualified_operator_cast_identifier
      | `Op_cast of operator_cast
    ]
)

and qualified_type_identifier = (
    scope_resolution
  * [
        `Depe_type_id of dependent_type_identifier
      | `Qual_type_id of qualified_type_identifier
      | `Temp_type of template_type
      | `Id of identifier (*tok*)
    ]
)

and requirement = [
    `Exp_stmt of expression_statement
  | `Type_requ of (Token.t (* "typename" *) * class_name)
  | `Comp_requ of (
        Token.t (* "{" *)
      * expression
      * Token.t (* "}" *)
      * Token.t (* "noexcept" *) option
      * trailing_return_type option
      * Token.t (* ";" *)
    )
]

and requirement_clause_constraint = [
    `True of true_ (*tok*)
  | `False of false_ (*tok*)
  | `Class_name of class_name
  | `Fold_exp of fold_expression
  | `Lambda_exp of lambda_expression
  | `Requis_exp of requires_expression
  | `LPAR_exp_RPAR of (Token.t (* "(" *) * expression * Token.t (* ")" *))
  | `Cons_conj of (
        requirement_clause_constraint * Token.t (* "&&" *)
      * requirement_clause_constraint
    )
  | `Cons_disj of (
        requirement_clause_constraint * Token.t (* "||" *)
      * requirement_clause_constraint
    )
]

and requirement_seq = (
    Token.t (* "{" *)
  * requirement list (* zero or more *)
  * Token.t (* "}" *)
)

and requires_clause = (
    Token.t (* "requires" *) * requirement_clause_constraint
)

and requires_expression = (
    Token.t (* "requires" *)
  * requires_parameter_list option
  * requirement_seq
)

and requires_parameter_list = (
    Token.t (* "(" *)
  * (
        anon_choice_param_decl_1a61eef
      * (Token.t (* "," *) * anon_choice_param_decl_1a61eef)
          list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and return_statement = [
    `Ret_opt_choice_exp_SEMI of (
        Token.t (* "return" *)
      * anon_choice_exp_55b4dba option
      * Token.t (* ";" *)
    )
  | `Ret_init_list_SEMI of (
        Token.t (* "return" *) * initializer_list * Token.t (* ";" *)
    )
]

and scope_resolution = (
    [
        `Id of identifier (*tok*)
      | `Temp_type of template_type
      | `Depe_type_id of dependent_type_identifier
    ]
      option
  * Token.t (* "::" *)
)

and sizeof_expression = [
    `Sizeof_choice_exp of (
        Token.t (* "sizeof" *)
      * [
            `Exp of expression
          | `LPAR_type_desc_RPAR of (
                Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
            )
        ]
    )
  | `Sizeof_DOTDOTDOT_LPAR_id_RPAR of (
        Token.t (* "sizeof" *) * Token.t (* "..." *) * Token.t (* "(" *)
      * identifier (*tok*) * Token.t (* ")" *)
    )
]

and statement = [
    `Case_stmt of (
        [
            `Case_exp of (Token.t (* "case" *) * expression)
          | `Defa of Token.t (* "default" *)
        ]
      * Token.t (* ":" *)
      * [
            `Choice_choice_attr_stmt of non_case_statement
          | `Decl of declaration
          | `Type_defi of type_definition
        ]
          list (* zero or more *)
    )
  | `Choice_choice_attr_stmt of non_case_statement
]

and static_assert_declaration = (
    Token.t (* "static_assert" *)
  * Token.t (* "(" *)
  * expression
  * (
        Token.t (* "," *)
      * [
            `Str_lit of string_literal
          | `Raw_str_lit of raw_string_literal (*tok*)
          | `Conc_str of concatenated_string
        ]
    )
      option
  * Token.t (* ")" *)
  * Token.t (* ";" *)
)

and subscript_designator = (
    Token.t (* "[" *) * expression * Token.t (* "]" *)
)

and subscript_expression = (
    expression * Token.t (* "[" *) * anon_choice_exp_3078596
  * Token.t (* "]" *)
)

and switch_statement = (
    Token.t (* "switch" *) * condition_clause * compound_statement
)

and template_argument_list = (
    Token.t (* "<" *)
  * (
        anon_choice_type_desc_4d9cafa
      * (Token.t (* "," *) * anon_choice_type_desc_4d9cafa)
          list (* zero or more *)
    )
      option
  * tok_prec_p1_gt (*tok*)
)

and template_declaration = (
    Token.t (* "template" *)
  * template_parameter_list
  * requires_clause option
  * [
        `Empty_decl of empty_declaration
      | `Alias_decl of alias_declaration
      | `Decl of declaration
      | `Temp_decl of template_declaration
      | `Func_defi of function_definition
      | `Conc_defi of concept_definition
      | `Cons_or_dest_decl of constructor_or_destructor_declaration
      | `Cons_or_dest_defi of constructor_or_destructor_definition
      | `Op_cast_decl of operator_cast_declaration
      | `Op_cast_defi of operator_cast_definition
    ]
)

and template_function = (identifier (*tok*) * template_argument_list)

and template_method = (identifier (*tok*) * template_argument_list)

and template_parameter_list = (
    Token.t (* "<" *)
  * (
        anon_choice_param_decl_13b5913
      * (Token.t (* "," *) * anon_choice_param_decl_13b5913)
          list (* zero or more *)
    )
      option
  * tok_prec_p1_gt (*tok*)
)

and template_type = (identifier (*tok*) * template_argument_list)

and throw_specifier = (
    Token.t (* "throw" *)
  * Token.t (* "(" *)
  * (
        type_descriptor
      * (Token.t (* "," *) * type_descriptor) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and top_level_item = [
    `Choice_func_defi of [
        `Func_defi of function_definition
      | `Link_spec of linkage_specification
      | `Decl of declaration
      | `Choice_case_stmt of statement
      | `Attr_stmt of attributed_statement
      | `Type_defi of type_definition
      | `Empty_decl of empty_declaration
      | `Prep_if of preproc_if
      | `Prep_ifdef of preproc_ifdef
      | `Prep_incl of preproc_include
      | `Prep_def of preproc_def
      | `Prep_func_def of preproc_function_def
      | `Prep_call of preproc_call
    ]
  | `Name_defi of (
        Token.t (* "namespace" *)
      * anon_choice_name_id_ba1b968 option
      * declaration_list
    )
  | `Conc_defi of concept_definition
  | `Name_alias_defi of (
        Token.t (* "namespace" *) * identifier (*tok*) * Token.t (* "=" *)
      * anon_choice_name_id_1d0ba77 * Token.t (* ";" *)
    )
  | `Using_decl of using_declaration
  | `Alias_decl of alias_declaration
  | `Static_assert_decl of static_assert_declaration
  | `Temp_decl of template_declaration
  | `Temp_inst of (
        Token.t (* "template" *)
      * declaration_specifiers option
      * declarator
      * Token.t (* ";" *)
    )
  | `Cons_or_dest_defi of constructor_or_destructor_definition
  | `Op_cast_defi of operator_cast_definition
  | `Op_cast_decl of operator_cast_declaration
]

and trailing_return_type = (Token.t (* "->" *) * type_descriptor)

and translation_unit = top_level_item list (* zero or more *)

and try_statement = (
    Token.t (* "try" *)
  * compound_statement
  * catch_clause list (* one or more *)
)

and type_declarator = [
    `Attr_type_decl of (
        type_declarator
      * attribute_declaration list (* one or more *)
    )
  | `Poin_type_decl of (
        ms_based_modifier option
      * Token.t (* "*" *)
      * ms_pointer_modifier list (* zero or more *)
      * type_qualifier list (* zero or more *)
      * type_declarator
    )
  | `Func_type_decl of (type_declarator * parameter_list)
  | `Array_type_decl of (
        type_declarator
      * Token.t (* "[" *)
      * type_qualifier list (* zero or more *)
      * anon_choice_exp_508611b option
      * Token.t (* "]" *)
    )
  | `Paren_type_decl of (
        Token.t (* "(" *) * type_declarator * Token.t (* ")" *)
    )
  | `Id of identifier (*tok*)
]

and type_definition = (
    Token.t (* "typedef" *)
  * type_qualifier list (* zero or more *)
  * type_specifier
  * type_declarator
  * (Token.t (* "," *) * type_declarator) list (* zero or more *)
  * Token.t (* ";" *)
)

and type_descriptor = (
    type_qualifier list (* zero or more *)
  * type_specifier
  * type_qualifier list (* zero or more *)
  * abstract_declarator option
)

and type_specifier = [
    `Struct_spec of (
        Token.t (* "struct" *)
      * ms_declspec_modifier option
      * attribute_declaration option
      * anon_choice_class_name_d6703e6
    )
  | `Union_spec of (
        Token.t (* "union" *)
      * ms_declspec_modifier option
      * attribute_declaration option
      * anon_choice_class_name_d6703e6
    )
  | `Enum_spec of (
        Token.t (* "enum" *)
      * [
            `Class of Token.t (* "class" *)
          | `Struct of Token.t (* "struct" *)
        ]
          option
      * [
            `Class_name_opt_enum_base_clause_opt_enum_list of (
                class_name
              * enum_base_clause option
              * enumerator_list option
            )
          | `Enum_list of enumerator_list
        ]
    )
  | `Class_spec of (
        Token.t (* "class" *)
      * ms_declspec_modifier option
      * attribute_declaration option
      * anon_choice_class_name_d6703e6
    )
  | `Sized_type_spec of sized_type_specifier
  | `Prim_type of primitive_type (*tok*)
  | `Temp_type of template_type
  | `Depe_type of (Token.t (* "typename" *) * type_specifier)
  | `Plac_type_spec of (
        type_specifier option
      * [ `Auto of Token.t (* "auto" *) | `Decl_auto of decltype_auto ]
    )
  | `Decl of (
        Token.t (* "decltype" *) * Token.t (* "(" *) * expression
      * Token.t (* ")" *)
    )
  | `Choice_qual_type_id of [
        `Qual_type_id of qualified_type_identifier
      | `Id of identifier (*tok*)
    ]
]

and unary_expression = (anon_choice_BANG_67174d6 * expression)

and unary_left_fold = (Token.t (* "..." *) * fold_operator * expression)

and unary_right_fold = (expression * fold_operator * Token.t (* "..." *))

and update_expression = [
    `Choice_DASHDASH_exp of (anon_choice_DASHDASH_d11def2 * expression)
  | `Exp_choice_DASHDASH of (expression * anon_choice_DASHDASH_d11def2)
]

and using_declaration = (
    Token.t (* "using" *)
  * Token.t (* "namespace" *) option
  * anon_choice_name_id_1d0ba77
  * Token.t (* ";" *)
)

and variadic_parameter_declaration = (
    declaration_specifiers
  * [
        `Vari_decl of variadic_declarator
      | `Vari_ref_decl of variadic_reference_declarator
    ]
)

and while_statement = (Token.t (* "while" *) * condition_clause * statement)

type comment (* inlined *) = Token.t

type variadic_parameter (* inlined *) = Token.t (* "..." *)

type auto (* inlined *) = Token.t (* "auto" *)

type semgrep_ellipsis (* inlined *) = Token.t (* "..." *)

type ms_restrict_modifier (* inlined *) = Token.t (* "__restrict" *)

type this (* inlined *) = Token.t (* "this" *)

type nullptr (* inlined *) = Token.t (* "nullptr" *)

type ms_unsigned_ptr_modifier (* inlined *) = Token.t (* "__uptr" *)

type ms_signed_ptr_modifier (* inlined *) = Token.t (* "__sptr" *)

type null (* inlined *) = Token.t (* "NULL" *)

type access_specifier (* inlined *) = (
    anon_choice_public_c9638d9 * Token.t (* ":" *)
)

type field_identifier (* inlined *) = identifier (*tok*)

type statement_identifier (* inlined *) = identifier (*tok*)

type type_identifier (* inlined *) = identifier (*tok*)

type namespace_identifier (* inlined *) = identifier (*tok*)

type namespace_definition_name (* inlined *) = (
    anon_choice_name_id_ba1b968
  * Token.t (* "::" *)
  * Token.t (* "inline" *) option
  * identifier (*tok*)
)

type structured_binding_declarator (* inlined *) = (
    Token.t (* "[" *)
  * identifier (*tok*)
  * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
  * Token.t (* "]" *)
)

type preproc_parenthesized_expression (* inlined *) = (
    Token.t (* "(" *) * preproc_expression * Token.t (* ")" *)
)

type preproc_unary_expression (* inlined *) = (
    anon_choice_BANG_67174d6 * preproc_expression
)

type abstract_reference_declarator (* inlined *) = (
    ref_qualifier
  * abstract_declarator option
)

type anon_opt_class_name_opt_virt_spec_opt_base_class_clause_field_decl_list_89302cc (* inlined *) = (
    class_name option
  * virtual_specifier option
  * base_class_clause option
  * field_declaration_list
)

type array_type_declarator (* inlined *) = (
    type_declarator
  * Token.t (* "[" *)
  * type_qualifier list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

type attributed_type_declarator (* inlined *) = (
    type_declarator
  * attribute_declaration list (* one or more *)
)

type case_statement (* inlined *) = (
    [
        `Case_exp of (Token.t (* "case" *) * expression)
      | `Defa of Token.t (* "default" *)
    ]
  * Token.t (* ":" *)
  * [
        `Choice_choice_attr_stmt of non_case_statement
      | `Decl of declaration
      | `Type_defi of type_definition
    ]
      list (* zero or more *)
)

type class_specifier (* inlined *) = (
    Token.t (* "class" *)
  * ms_declspec_modifier option
  * attribute_declaration option
  * anon_choice_class_name_d6703e6
)

type co_return_statement (* inlined *) = (
    Token.t (* "co_return" *)
  * expression option
  * Token.t (* ";" *)
)

type co_yield_statement (* inlined *) = (
    Token.t (* "co_yield" *) * expression * Token.t (* ";" *)
)

type compound_requirement (* inlined *) = (
    Token.t (* "{" *)
  * expression
  * Token.t (* "}" *)
  * Token.t (* "noexcept" *) option
  * trailing_return_type option
  * Token.t (* ";" *)
)

type constraint_conjunction (* inlined *) = (
    requirement_clause_constraint * Token.t (* "&&" *)
  * requirement_clause_constraint
)

type constraint_disjunction (* inlined *) = (
    requirement_clause_constraint * Token.t (* "||" *)
  * requirement_clause_constraint
)

type decltype (* inlined *) = (
    Token.t (* "decltype" *) * Token.t (* "(" *) * expression
  * Token.t (* ")" *)
)

type deep_ellipsis (* inlined *) = (
    Token.t (* "<..." *) * expression * Token.t (* "...>" *)
)

type dependent_type (* inlined *) = (
    Token.t (* "typename" *) * type_specifier
)

type enum_specifier (* inlined *) = (
    Token.t (* "enum" *)
  * [ `Class of Token.t (* "class" *) | `Struct of Token.t (* "struct" *) ]
      option
  * [
        `Class_name_opt_enum_base_clause_opt_enum_list of (
            class_name
          * enum_base_clause option
          * enumerator_list option
        )
      | `Enum_list of enumerator_list
    ]
)

type for_range_loop (* inlined *) = (
    Token.t (* "for" *)
  * Token.t (* "(" *)
  * init_statement option
  * declaration_specifiers
  * declarator
  * Token.t (* ":" *)
  * anon_choice_exp_3078596
  * Token.t (* ")" *)
  * statement
)

type friend_declaration (* inlined *) = (
    Token.t (* "friend" *)
  * [
        `Decl of declaration
      | `Func_defi of function_definition
      | `Opt_choice_class_class_name_SEMI of (
            [
                `Class of Token.t (* "class" *)
              | `Struct of Token.t (* "struct" *)
              | `Union of Token.t (* "union" *)
            ]
              option
          * class_name
          * Token.t (* ";" *)
        )
    ]
)

type function_type_declarator (* inlined *) = (
    type_declarator * parameter_list
)

type initializer_pair (* inlined *) = (
    [ `Subs_desi of subscript_designator | `Field_desi of field_designator ]
      list (* one or more *)
  * Token.t (* "=" *)
  * anon_choice_exp_3078596
)

type inline_method_definition (* inlined *) = (
    declaration_specifiers
  * field_declarator
  * [
        `Comp_stmt of compound_statement
      | `Defa_meth_clause of default_method_clause
      | `Delete_meth_clause of delete_method_clause
    ]
)

type namespace_alias_definition (* inlined *) = (
    Token.t (* "namespace" *) * identifier (*tok*) * Token.t (* "=" *)
  * anon_choice_name_id_1d0ba77 * Token.t (* ";" *)
)

type namespace_definition (* inlined *) = (
    Token.t (* "namespace" *)
  * anon_choice_name_id_ba1b968 option
  * declaration_list
)

type parenthesized_type_declarator (* inlined *) = (
    Token.t (* "(" *) * type_declarator * Token.t (* ")" *)
)

type placeholder_type_specifier (* inlined *) = (
    type_specifier option
  * [ `Auto of Token.t (* "auto" *) | `Decl_auto of decltype_auto ]
)

type pointer_type_declarator (* inlined *) = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * type_declarator
)

type preproc_elif (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * translation_unit
  * anon_choice_prep_else_8b52b0f option
)

type preproc_elif_in_field_declaration_list (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_97ea65e option
)

type preproc_else (* inlined *) = (pat_56631e5 * translation_unit)

type preproc_else_in_field_declaration_list (* inlined *) = (
    pat_56631e5
  * field_declaration_list_item list (* zero or more *)
)

type reference_declarator (* inlined *) = (ref_qualifier * declarator)

type reference_field_declarator (* inlined *) = (
    ref_qualifier * field_declarator
)

type struct_specifier (* inlined *) = (
    Token.t (* "struct" *)
  * ms_declspec_modifier option
  * attribute_declaration option
  * anon_choice_class_name_d6703e6
)

type template_instantiation (* inlined *) = (
    Token.t (* "template" *)
  * declaration_specifiers option
  * declarator
  * Token.t (* ";" *)
)

type template_template_parameter_declaration (* inlined *) = (
    Token.t (* "template" *)
  * template_parameter_list
  * [
        `Type_param_decl of type_parameter_declaration
      | `Vari_type_param_decl of variadic_type_parameter_declaration
      | `Opt_type_param_decl of optional_type_parameter_declaration
    ]
)

type throw_statement (* inlined *) = (
    Token.t (* "throw" *)
  * expression option
  * Token.t (* ";" *)
)

type type_parameter_pack_expansion (* inlined *) = (
    type_descriptor * Token.t (* "..." *)
)

type type_requirement (* inlined *) = (Token.t (* "typename" *) * class_name)

type union_specifier (* inlined *) = (
    Token.t (* "union" *)
  * ms_declspec_modifier option
  * attribute_declaration option
  * anon_choice_class_name_d6703e6
)

type macro_type_specifier (* inlined *) = (
    identifier (*tok*) * Token.t (* "(" *) * type_descriptor
  * Token.t (* ")" *)
)
